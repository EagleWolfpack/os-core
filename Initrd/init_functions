## CONSTANTS ###############################################

# Reset fb color mode
RESET="]R"
# ANSI COLORS
# Erase to end of line
CRE="[K"
# Clear entire screen
CLEAR="[H[J"
# Normal color
NORMAL="[0;39m"
# RED: Failure or error message
RED="[1;31m"
# GREEN: Success message
GREEN="[1;32m"
# YELLOW: Descriptions
YELLOW="[1;33m"
# BLUE: System mesages
BLUE="[1;34m"
# MAGENTA: Found devices or drivers
MAGENTA="[1;35m"
# CYAN: Questions
CYAN="[1;36m"
# BOLD WHITE: Hint
WHITE="[1;37m"

## HELPER FUNCTIONS ########################################

bashify(){
 # create valid bash identifier
 [ $# -ne 1 ] && exit 1
 
 local p=`echo $1 | cut -d "=" -f1 | sed 's|[.?+* ]|\_|g'`
 echo "$p"=`echo $1 | cut -d "=" -f2`
}

getbootparams(){
 # eval all parameters with values
 [ -n "$CMDLINE" ] || return 1
 local p
 for p in $CMDLINE; do
  case "$p" in *=*) eval `bashify "$p"`;; esac
 done
 return 0
}

checkbootparam(){
 # is $1 part of CMDLINE?
 [ -n "$CMDLINE" ] || return 1
 if `echo $CMDLINE | grep -wq $1`; then
	 return 0
 fi
 return 1
}

bailout(){
 [ "$1" = "0" ] && return 0
 reboot -f
 sleep 1337
}

debugshell(){
 [ -n "$1" ] && echo "$1"
 if ping -c 1 8.8.8.8 > /dev/null 2>&1; then
  echo "${BLUE}Starting sshd.${NORMAL}"
  dropbear -E
 fi
 echo "${RED}A debugshell was called.${NORMAL}"
 modprobe ohci-hcd 1&2>/dev/null || modprobe uhci-hcd 1&2>/dev/null
 /bin/busybox sh
 return 0
}

load_modules(){
 for m in `ls $1 2> /dev/null`; do
 	insmod $m
 	[ $? -eq 0 ] || return 1
 done
}

mountsfs(){
 [ -n "$1" ] && [ -d "$LINK/sfs/$1" ] || return 1
 for s in `ls $LINK/sfs/$1/*.sfs 2> /dev/null`; do
	target="`basename $s | sed 's/\.sfs$//g'`"
	[ -d "$TCOS/$1/$target" ] || mkdir "$TCOS/$1/$target"
	if mount -n -t squashfs -o loop,ro "$s" "$TCOS/$1/$target" >/dev/null 2>&1; then
	   echo "$target mounted...${GREEN}yes${NORMAL}"
	else
	   echo "$target mounted...${RED}no${NORMAL}"
	   continue
	fi
	#create a tree for later aufs-mounts, beware of the leading colon!
	#TREE="${TREE}:$TCOS/$1/${target}=ro"
	TREE="$TCOS/$1/${target}=ro:${TREE}"
 done
 return 0
}

mountcustom(){
 # suppports currently: gz, bz2
 [ -d "$1"/packages ] || return 0
 packages=`find $1/packages -maxdepth 1 -type f | sort`
 for p in $packages; do
  if `echo $p |  egrep -q 'tar.bz2$'`; then
   (cd $SHADOW ; tar -xjf "$p")
   [ $? -eq 0 ] && echo "$p applied...${GREEN}yes${NORMAL}"
  elif `echo $p | egrep -q 'tar.gz$'`; then
   (cd $SHADOW ; tar -xzf "$p")
   [ $? -eq 0 ] && echo "$p applied...${GREEN}yes${NORMAL}"
  else
   echo "Error: file format of $p is ${RED}not supported${NORMAL}"
  fi
 done
 # plain file support
 # TODO: works only for folder which are linked from $SHADOW back to /
 [ -d "$1"/rootfs ] && (cd "$1"/rootfs ; cp -a * $SHADOW) && echo "plain files ${GREEN}copied${NORMAL}"
 }
