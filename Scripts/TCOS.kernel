#!/bin/bash
# TCOS.Kernel
# download, configure and prepare Linux kernel 
# origin by (C) Klaus Knopper 2013
# adapted to tcos by 
#    Steffen Hoenig <s.hoenig@openthinclient.com>
#    JÃ¶rn Frenzel <j.frenzel@openthinclient.com>
# License: GPL V2

set -e  -f

#set -x 

if [ -z "$KVERS" -o -z "$ARCH" ]; then
	exit 0
fi

MAJOR=$(echo $KVERS | cut -d. -f1-2)

#MAJOR=${KVERS%.*}  # 3.4.70 -> 3.4
#MINOR=${KVERS##*.} # 3.4.70 -> 70

cd /

if [ ! -d Kernel/aufs-linux ]; then
    mkdir -p Kernel
    echo -e "\033[1m Fetching kernel/aufs-linux from github.com.\033[0m"
    ( cd Kernel ; git clone https://github.com/sfjro/aufs3-linux.git aufs-linux )
else
    ( cd Kernel/aufs-linux ; git pull ) || true
fi

# check, whether there is a copy of a kernel checkout already
if  [ ! -d Kernel/aufs-linux-${KVERS} ]; then
    echo "MAJOR = $MAJOR"
    # 1. Create a clone to a local ref, and checkout to a specific branch
    echo -e "\033[1m Creating a working copy kernel/aufs-linux-${KVERS} \033[0m"
    ( cd Kernel/aufs-linux ; git checkout aufs${MAJOR} )
    git clone -b aufs${MAJOR} Kernel/aufs-linux Kernel/aufs-linux-${KVERS}

    # 2. Apply MINOR patch
    if ! [ -e Kernel/patch-${KVERS}.xz ]; then
	wget -c -P Kernel/ https://www.kernel.org/pub/linux/kernel/v3.x/patch-${KVERS}.xz
    fi
    set +e

    echo -e "\033[1m Patching major aufs kernel to vanilla minor if necessary ..\033[0m"
    # Don't try to apply a patch if there is no minor (i.e. kernel version is 3.17)
    # Keep in mind: The major includes the aufs stuff already. 
    [ "$MINOR" != "$MAJOR" ] && ( cd Kernel/aufs-linux-${KVERS} ; xzcat ../patch-${KVERS}.xz | patch -p1)

    # we don't like it dirty
    find Kernel/aufs-linux-${KVERS} -type d -name '.git' -exec rm -rf {} \; || true
    find Kernel/aufs-linux-${KVERS} -type f -name '.gitignore' -exec rm -f {} \; || true

fi


# have three kernel compile folder, each for a cpu_type
# this should be more perfomant than compiling three times in the same folder
# (if you change the configuration and need to recompile)
( cd Kernel/; \
  [ -d aufs-linux-${KVERS}_normal ] ||    (echo "Copying kernel source for normal kernel"; cp -al aufs-linux-${KVERS} aufs-linux-${KVERS}_normal) ; \
  [ -d aufs-linux-${KVERS}_non-pae ] ||   (echo "Copying kernel source for non-pae kernel";cp -al aufs-linux-${KVERS}_normal aufs-linux-${KVERS}_non-pae); \
  [ -d aufs-linux-${KVERS}_transmeta ] || (echo "Copying kernel source for transmeta kernel"; cp -al aufs-linux-${KVERS}_normal aufs-linux-${KVERS}_transmeta);
)

#for CPU_TYPE in normal non-pae transmeta; do
# for CPU_TYPE in non-pae transmeta; do
# for CPU_TYPE in non-pae; do
for CPU_TYPE in normal; do
# for CPU_TYPE in transmeta; do
    mkpkgParms="--revision=1 --append-to-version=+tcos-${CPU_TYPE}"
    tcosKernelConf=Sources/kernel${MAJOR}-${ARCH}-${CPU_TYPE}.config
    if [ -e $tcosKernelConf ]; then
	cp  $tcosKernelConf Kernel/aufs-linux-${KVERS}_${CPU_TYPE}/.config 
    else
	echo "Could not find file $tcosKernelConf ." 
	echo "We expect a ready to use configuratioen here - exiting." 
	exit 1
	#read -p "Which kernel configuration you'd like to use? (e.G. 3.12) " a
	#if [ -n "$a" ]; then
         #   cp Sources/kernel${a}-"$ARCH".config Kernel/aufs-linux-${KVERS}/.config
	#else
	 #   echo "Do not know which kernel to build. Stopping now."
	 #   exit 1
	#fi
    fi

    # make -j$CPU_CORES ARCH="$ARCH" bzImage && 
    (cd Kernel/aufs-linux-${KVERS}_${CPU_TYPE} ; nice -n19 make ARCH="$ARCH" oldconfig && if [ "$ARCH" = "i386" ]; then export CFLAGS="-m32"; fi && \
	DEB_HOST_ARCH="$ARCH" CONCURRENCY_LEVEL="$CPU_CORES" ARCH="$ARCH" MODULE_LOC=`pwd`/../modules \
	nice -n19 fakeroot make-kpkg  --cross-compile - --arch $ARCH $mkpkgParms --us --uc kernel_image modules_image kernel_headers \
    )

    # if ! diff -q Kernel/aufs-linux-${KVERS}_${CPU_TYPE}/.config $tcosKernelConf &> /dev/null ; then 
    # 	read -p "Save your changes back to $tcosKernelConf ? [Y/n] " a
    # 	case "$a" in
    # 	    Y*|y*|J*|j*)
    # 		cp -a Kernel/aufs-linux-${KVERS}_${CPU_TYPE}/.config $tcosKernelConf
    #  		;;
    # 	esac
    # fi
    echo "Kernel $CPU_TYPE done."; sleep 10

done 

